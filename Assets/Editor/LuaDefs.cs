using UnityEditor;
using System.Reflection;
using UnityEngine;
using System.Collections.Generic;
using System;
using System.IO;

public class LuaDefs {
    [UnityEditor.Callbacks.DidReloadScripts]
    [MenuItem("Meta Tools/Generate Lua Defs")]
    public static void GenerateLuaDefs() {
        List<Type> result = new List<Type>();

        Assembly a = typeof(SettingsManager).Assembly;

        foreach (Type t in a.GetTypes()) {
            if (t.GetCustomAttributes(typeof(MoonSharp.Interpreter.MoonSharpUserDataAttribute), false).Length > 0) {
                result.Add(t);
            }
        }

        Debug.Log("Writing Lua defs to file...");
        String defsPath = Path.Combine(Application.streamingAssetsPath, @"DorsalConfigs/defs.lua");
        StreamWriter defs = new StreamWriter(defsPath);

        defs.WriteLine($"--- DO NOT EDIT THIS FILE");
        defs.WriteLine($"--- Generated by {Application.productName} {Application.version}");
        defs.WriteLine($"--- This file, and workspace.code-workspace, are required to make Visual Studio Code's IntelliSense work for DorsalVR's Lua scripting.");
        defs.WriteLine($"--- See: https://github.com/MichaelJW/DorsalVR");

        foreach (Type t in result) {
            string className = t.Name.Replace("LuaProxy", "");
            defs.WriteLine();
            defs.WriteLine($"--- @class {className}");
            if (t.GetCustomAttributes(typeof(LuaTag), false).Length > 0) {
                string description = t.GetCustomAttribute<LuaTag>().description;
                if (description != "") {
                    foreach (string descriptionLine in description.Split('\n')) {
                        defs.WriteLine($"--- {descriptionLine}");
                    }
                }
            }
            foreach (FieldInfo f in t.GetFields()) {
                if (f.DeclaringType == t | f.DeclaringType.Namespace.StartsWith("Dorsal.")) {
                    defs.WriteLine($"--- @field {f.Name} {CSharpTypeToLuaType(f.FieldType)}");  
                }
            }
            foreach (PropertyInfo p in t.GetProperties()) {
                if (p.DeclaringType == t | p.DeclaringType.Namespace.StartsWith("Dorsal.")) {
                   defs.WriteLine($"--- @field {p.Name} {CSharpTypeToLuaType(p.PropertyType)}");
                }
            }
            defs.WriteLine($"local {className}_def = {{}}");
            foreach (MethodInfo m in t.GetMethods(~BindingFlags.NonPublic)) {
                if ((m.DeclaringType == t | m.DeclaringType.Namespace.StartsWith("Dorsal.")) & !(m.Name.StartsWith("get_") | m.Name.StartsWith("set_"))) {  // only methods that we explicitly define
                    string mParams = "";
                    foreach (ParameterInfo mParam in m.GetParameters()) {
                        mParams += mParam.Name + ", ";  // TODO: Use LINQ or something
                        defs.WriteLine($"--- @param {mParam.Name} {CSharpTypeToLuaType(mParam.ParameterType)}");
                    }
                    mParams = mParams.Substring(0, Math.Max(0, mParams.Length - 2));  // remove trailing comma
                    if (m.ReturnType.Name != "Void") {
                        defs.WriteLine($"--- @return {CSharpTypeToLuaType(m.ReturnType)}");
                    }
                    if (m.GetCustomAttributes(typeof(LuaTag), false).Length > 0) {
                        string description = m.GetCustomAttribute<LuaTag>().description;
                        if (description != "") {
                            foreach (string descriptionLine in description.Split('\n')) {
                                defs.WriteLine($"--- {descriptionLine}");
                            }
                        }
                    }
                    defs.WriteLine($"function {className}_def:{m.Name}({mParams}) end");
                }
            }
        }

        // We assume that any Dorsal components attached to SettingsManager will be accessible via 
        // scripts.Globals[] in Lua, and so make references for them here
        SettingsManager settingsManager = GameObject.FindObjectOfType<SettingsManager>();
        Component[] smComponents = settingsManager.GetComponents(typeof(Component));
        if (smComponents.Length > 0) {
            defs.WriteLine();
            defs.WriteLine($"--- Define the objects that are always created by DorsalVR and therefore already accessible:");
        }
        for (int i = 0; i < smComponents.Length; i++) {
            Type componentType = smComponents[i].GetType();
            if (!(componentType.Namespace is null) && componentType.Namespace.StartsWith("Dorsal.")) {
                string className = componentType.Name;
                string instanceName = className.Substring(0, 1).ToLower() + className.Substring(1);
                defs.WriteLine($"--- @type {className}");
                defs.WriteLine($"{instanceName} = {{}}");
            }
        }

        defs.Close();
        Debug.Log("Wrote Lua defs to file.");
    }

    private static string CSharpTypeToLuaType(string cSharpType) {
        switch (cSharpType) {
            case "Void":
                return "nil";
            case "String":
                return "string";
            case "UInt16":
            case "UInt32":
            case "UInt64":
            case "Int16":
            case "Int32":
            case "Int64":
            case "Decimal":
            case "Double":
            case "Single":
                return "number";
            default:
                return cSharpType.Replace("LuaProxy", "");
        }
    }

    private static string CSharpTypeToLuaType(Type cSharpType) {
        if (cSharpType.Name.StartsWith("Dictionary`")) {
            string keyType = CSharpTypeToLuaType(cSharpType.GetGenericArguments()[0]);
            string valueType = CSharpTypeToLuaType(cSharpType.GetGenericArguments()[1]);
            return $"table<{keyType}, {valueType}>";
        }
        if (cSharpType.Name.StartsWith("List`")) {
            string elementType = CSharpTypeToLuaType(cSharpType.GetGenericArguments()[0]);
            return $"table<number, {elementType}>";  // MoonSharp converts lists to tables indexed 1-based
        }
        return CSharpTypeToLuaType(cSharpType.Name);
    }

    private static void ClearConsole() {
        Assembly assembly = Assembly.GetAssembly(typeof(UnityEditor.Editor));
        Type type = assembly.GetType("UnityEditor.LogEntries");
        MethodInfo method = type.GetMethod("Clear");
        method.Invoke(new object(), null);
    }
}
